

plugins {
    id 'eclipse'
    id 'application'
    id 'java-library'
    id 'org.javamodularity.moduleplugin' version "1.8.11"
    id "org.beryx.jlink" version "2.25.0"
}

repositories {
    mavenCentral()
}

mainClassName = "builder.Builder"
applicationName = "GUIslice"
archivesBaseName = 'builder'
project.version = '0.17.b12'
 
processResources { 
     from("src/main/java/") { 
         include 'resources/**' 
     } 
}

application {
    mainClass = 'builder.Builder'
    mainModule = 'builder'
}

def compiler = javaToolchains.compilerFor {
    languageVersion = JavaLanguageVersion.of(17)
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jar {
  manifest {
    attributes 'Main-Class': 'builder.Builder',
      "Implementation-Title": "GUIsliceBuilder",
      "Implementation-Version": archiveVersion
  }
}

jlink {
  options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

  mergedModule {
    requires 'java.management';
    requires 'java.naming';
    requires 'java.logging';
    requires 'java.scripting';
    requires 'java.sql';
    requires 'java.rmi';
    requires 'java.xml';
    requires 'java.desktop';
    requires 'java.datatransfer';
    requires 'java.compiler';
    uses 'com.formdev.flatlaf.FlatDefaultsAddon';
  }
  
  targetPlatform('win-x64') {
    jdkHome = jdkDownload('https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.3%2B7/OpenJDK17U-jdk_x64_windows_hotspot_17.0.3_7.zip')
  }
  
  targetPlatform('linux-x64') {
    jdkHome = jdkDownload('https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.3%2B7/OpenJDK17U-jdk_x64_linux_hotspot_17.0.3_7.tar.gz')
  }
  
  launcher {
    name = 'GUIslice'
    noConsole = true
  }
}

def JLINK_LINUX  = "$buildDir/image/GUIslice-linux-x64"
def JLINK_WIN    = "$buildDir/image/GUIslice-win-x64"
def TARGET_LINUX = "${buildDir}/tmp/linux/GUIsliceBuilder"
def TARGET_WIN   = "${buildDir}/tmp/windows/GUIsliceBuilder"

def innoSetupDir = new File("${buildDir}/innosetup")

tasks.jlink.doLast {
  copy {
      from "${projectDir}/scripts-win"
      into TARGET_WIN
  }
  copy {
      includeEmptyDirs = true
      from "${projectDir}/package"
      into TARGET_WIN
  }
  copy {
      from JLINK_WIN
      into TARGET_WIN
  }
  copy {
      from "${projectDir}/scripts/GUIslice.sh"
      into TARGET_LINUX
  }
  copy {
      includeEmptyDirs = true
      from "${projectDir}/package"
      into TARGET_LINUX
  }
  copy {
      from JLINK_WIN
      into TARGET_WIN
  }

  delete innoSetupDir  
  innoSetupDir.mkdir();  

  copy {
    from("${projectDir}/scripts/setup_template.iss")
    rename("setup_template.iss", "setup.iss")
    expand([
      applicationVersion: "${project.version}",
    ])
    into(innoSetupDir)
  }
    
}

task packageWinDistrib(type: Zip) {
  dependsOn build, assemble
  group = "assemble"
  description = "windows package distribution"
  
  doFirst {
    copy {
      from("${projectDir}/scripts/setup_template.iss")
      rename("setup_template.iss", "setup.iss")
      expand([
        applicationVersion: "${project.version}",
      ])
      into(innoSetupDir)
    }
    
    exec {
      workingDir projectDir
      commandLine "ISCC.exe ${innoSetupDir}/setup.iss /q".split()
    }  
    delete "${innoSetupDir}/setup.iss"
  }
  from innoSetupDir
  archiveBaseName = "builder-" + "win-x64"
  destinationDirectory = file("${buildDir}/disp")
  archiveExtension = "zip"
  destinationDirectory = file("${buildDir}/disp")
}

task packageLinuxDistrib(type: Tar) {
  dependsOn build, assemble
  description = "create linux distribution from linux temp folder"
  group = "assemble"
  description = "linux package distribution"
  from ("${buildDir}/tmp/linux") {
   exclude ("**/*.sh") // 1
   fileMode 0644
  }
  from ("${buildDir}/tmp/linux") {
   include ("**/*.sh")
   fileMode 0755
  }
  archiveBaseName = "builder-" + "linux"
  destinationDirectory = file("${buildDir}/disp")
  archiveExtension = "tar.gz"
  compression = Compression.GZIP  
}

task packageAll() {
  dependsOn build, assemble, packageWinDistrib, packageLinuxDistrib
  group = "assemble"
  description = "package all distributions"
}

dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')
} 

